// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const addMessage = `-- name: AddMessage :exec
INSERT INTO messages (
        sender,
        ticket_id,
        message_text,
        message_id,
        channel_id
    )
VALUES(
        $1,
        $2,
        $3,
        $4,
        $5
    )
`

type AddMessageParams struct {
	Sender      int64
	TicketID    int64
	MessageText string
	MessageID   int64
	ChannelID   int64
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) error {
	_, err := q.db.ExecContext(ctx, addMessage,
		arg.Sender,
		arg.TicketID,
		arg.MessageText,
		arg.MessageID,
		arg.ChannelID,
	)
	return err
}

const addTicket = `-- name: AddTicket :exec
INSERT INTO tickets (requester, is_open)
VALUES ($1, TRUE)
`

func (q *Queries) AddTicket(ctx context.Context, requester int64) error {
	_, err := q.db.ExecContext(ctx, addTicket, requester)
	return err
}

const getAllTickets = `-- name: GetAllTickets :many
SELECT tickets.channel_id,
    tickets.requester,
    tickets.id
FROM messages,
    tickets
WHERE tickets.requester = $1
    AND messages.ticket_id = tickets.id
`

type GetAllTicketsRow struct {
	ChannelID sql.NullInt64
	Requester int64
	ID        int32
}

func (q *Queries) GetAllTickets(ctx context.Context, requester int64) ([]GetAllTicketsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTickets, requester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTicketsRow
	for rows.Next() {
		var i GetAllTicketsRow
		if err := rows.Scan(&i.ChannelID, &i.Requester, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessages = `-- name: GetMessages :many
SELECT messages.sender,
    messages.ticket_id,
    messages.message_text,
    messages.message_id,
    messages.channel_id,
    tickets.channel_id,
    tickets.requester,
    tickets.id
FROM messages,
    tickets
WHERE messages.ticket_id = tickets.id
    AND ticket.id = $1
`

type GetMessagesRow struct {
	Sender      int64
	TicketID    int64
	MessageText string
	MessageID   int64
	ChannelID   int64
	ChannelID_2 sql.NullInt64
	Requester   int64
	ID          int32
}

func (q *Queries) GetMessages(ctx context.Context, id int32) ([]GetMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesRow
	for rows.Next() {
		var i GetMessagesRow
		if err := rows.Scan(
			&i.Sender,
			&i.TicketID,
			&i.MessageText,
			&i.MessageID,
			&i.ChannelID,
			&i.ChannelID_2,
			&i.Requester,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenTicket = `-- name: GetOpenTicket :one
SELECT channel_id,
    requester,
    id
FROM tickets
WHERE requester = $1
    AND is_open = TRUE
`

type GetOpenTicketRow struct {
	ChannelID sql.NullInt64
	Requester int64
	ID        int32
}

func (q *Queries) GetOpenTicket(ctx context.Context, requester int64) (GetOpenTicketRow, error) {
	row := q.db.QueryRowContext(ctx, getOpenTicket, requester)
	var i GetOpenTicketRow
	err := row.Scan(&i.ChannelID, &i.Requester, &i.ID)
	return i, err
}

const insertChannel = `-- name: InsertChannel :exec
UPDATE tickets
SET channel_id = $1
WHERE id = $2
`

type InsertChannelParams struct {
	ChannelID sql.NullInt64
	ID        int32
}

func (q *Queries) InsertChannel(ctx context.Context, arg InsertChannelParams) error {
	_, err := q.db.ExecContext(ctx, insertChannel, arg.ChannelID, arg.ID)
	return err
}

const testAddIntoDb = `-- name: testAddIntoDb :exec
INSERT INTO messages (
        sender,
        requester,
        ticket_id,
        message_text,
        message_id,
        channel_id
    )
VALUES (
        1234,
        12345,
        12346,
        '1234567',
        12347,
        12347
    )
`

func (q *Queries) testAddIntoDb(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, testAddIntoDb)
	return err
}
